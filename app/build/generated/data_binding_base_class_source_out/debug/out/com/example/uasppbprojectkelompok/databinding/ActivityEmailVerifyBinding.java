// Generated by view binder compiler. Do not edit!
package com.example.uasppbprojectkelompok.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.uasppbprojectkelompok.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityEmailVerifyBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageView imageEmailVerifyPage;

  @NonNull
  public final LinearLayout linearLayout;

  @NonNull
  public final TextView msgEmailVerifyPage;

  @NonNull
  public final TextView reSendEmailEmailVerifyPage;

  @NonNull
  public final TextView titleEmailVerifyPage;

  @NonNull
  public final Button tryAgainEmailVerifyPage;

  private ActivityEmailVerifyBinding(@NonNull ConstraintLayout rootView,
      @NonNull ImageView imageEmailVerifyPage, @NonNull LinearLayout linearLayout,
      @NonNull TextView msgEmailVerifyPage, @NonNull TextView reSendEmailEmailVerifyPage,
      @NonNull TextView titleEmailVerifyPage, @NonNull Button tryAgainEmailVerifyPage) {
    this.rootView = rootView;
    this.imageEmailVerifyPage = imageEmailVerifyPage;
    this.linearLayout = linearLayout;
    this.msgEmailVerifyPage = msgEmailVerifyPage;
    this.reSendEmailEmailVerifyPage = reSendEmailEmailVerifyPage;
    this.titleEmailVerifyPage = titleEmailVerifyPage;
    this.tryAgainEmailVerifyPage = tryAgainEmailVerifyPage;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityEmailVerifyBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityEmailVerifyBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_email_verify, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityEmailVerifyBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.image_emailVerifyPage;
      ImageView imageEmailVerifyPage = ViewBindings.findChildViewById(rootView, id);
      if (imageEmailVerifyPage == null) {
        break missingId;
      }

      id = R.id.linearLayout;
      LinearLayout linearLayout = ViewBindings.findChildViewById(rootView, id);
      if (linearLayout == null) {
        break missingId;
      }

      id = R.id.msg_emailVerifyPage;
      TextView msgEmailVerifyPage = ViewBindings.findChildViewById(rootView, id);
      if (msgEmailVerifyPage == null) {
        break missingId;
      }

      id = R.id.reSendEmail_emailVerifyPage;
      TextView reSendEmailEmailVerifyPage = ViewBindings.findChildViewById(rootView, id);
      if (reSendEmailEmailVerifyPage == null) {
        break missingId;
      }

      id = R.id.title_emailVerifyPage;
      TextView titleEmailVerifyPage = ViewBindings.findChildViewById(rootView, id);
      if (titleEmailVerifyPage == null) {
        break missingId;
      }

      id = R.id.tryAgain_emailVerifyPage;
      Button tryAgainEmailVerifyPage = ViewBindings.findChildViewById(rootView, id);
      if (tryAgainEmailVerifyPage == null) {
        break missingId;
      }

      return new ActivityEmailVerifyBinding((ConstraintLayout) rootView, imageEmailVerifyPage,
          linearLayout, msgEmailVerifyPage, reSendEmailEmailVerifyPage, titleEmailVerifyPage,
          tryAgainEmailVerifyPage);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
